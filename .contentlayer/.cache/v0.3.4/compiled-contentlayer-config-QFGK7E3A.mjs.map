{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, defineNestedType, makeSource } from \"contentlayer/source-files\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\r\n\r\n/** Nested type for the optional demo button */\r\nconst Demo = defineNestedType(() => ({\r\n  name: \"Demo\",\r\n  fields: {\r\n    label: { type: \"string\", required: false },\r\n    url: { type: \"string\", required: true },\r\n  },\r\n}));\r\n\r\n/** Project MDX documents */\r\nexport const Project = defineDocumentType(() => ({\r\n  name: \"Project\",\r\n  filePathPattern: `projects/**/*.mdx`,\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: { type: \"string\", required: true },\r\n    summary: { type: \"string\", required: true },\r\n    date: { type: \"date\", required: true },\r\n\r\n    categories: { type: \"list\", of: { type: \"string\" }, required: false },\r\n    tools: { type: \"list\", of: { type: \"string\" }, required: false },\r\n\r\n    featured: { type: \"boolean\", required: false, default: false },\r\n\r\n    thumbnail: { type: \"string\", required: false },\r\n    thumbnailAlt: { type: \"string\", required: false }, // used for <Image> alt fallback\r\n    ogImage: { type: \"string\", required: false },\r\n\r\n    demo: { type: \"nested\", of: Demo, required: false },\r\n    repo: { type: \"string\", required: false },\r\n  },\r\n  computedFields: {\r\n    slug: {\r\n      type: \"string\",\r\n      resolve: (doc) => doc._raw.flattenedPath.replace(/^projects\\//, \"\"),\r\n    },\r\n    url: {\r\n      type: \"string\",\r\n      resolve: (doc) => `/project/${doc._raw.flattenedPath.replace(/^projects\\//, \"\")}`,\r\n    },\r\n  },\r\n}));\r\n\r\nexport default makeSource({\r\n  // your MDX lives under src/content\r\n  contentDirPath: \"src/content\",\r\n  documentTypes: [Project],\r\n  mdx: {\r\n    // remarkPlugins: [],\r\n    rehypePlugins: [\r\n      rehypeSlug,\r\n      [rehypeAutolinkHeadings, { behavior: \"wrap\" }],\r\n    ],\r\n  },\r\n  // disableImportAliasWarning: true,\r\n});\r\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB,kBAAkB;AACjE,OAAO,gBAAgB;AACvB,OAAO,4BAA4B;AAGnC,IAAM,OAAO,iBAAiB,OAAO;AAAA,EACnC,MAAM;AAAA,EACN,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IACzC,KAAK,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,EACxC;AACF,EAAE;AAGK,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC/C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,SAAS,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC1C,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IAErC,YAAY,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,MAAM;AAAA,IACpE,OAAO,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,MAAM;AAAA,IAE/D,UAAU,EAAE,MAAM,WAAW,UAAU,OAAO,SAAS,MAAM;AAAA,IAE7D,WAAW,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC7C,cAAc,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA;AAAA,IAChD,SAAS,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAE3C,MAAM,EAAE,MAAM,UAAU,IAAI,MAAM,UAAU,MAAM;AAAA,IAClD,MAAM,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,EAC1C;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,QAAQ,eAAe,EAAE;AAAA,IACpE;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,cAAc,QAAQ,eAAe,EAAE,CAAC;AAAA,IACjF;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA;AAAA,EAExB,gBAAgB;AAAA,EAChB,eAAe,CAAC,OAAO;AAAA,EACvB,KAAK;AAAA;AAAA,IAEH,eAAe;AAAA,MACb;AAAA,MACA,CAAC,wBAAwB,EAAE,UAAU,OAAO,CAAC;AAAA,IAC/C;AAAA,EACF;AAAA;AAEF,CAAC;",
  "names": []
}
